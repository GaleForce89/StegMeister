//apply application and java up top to ease creation of gradle build
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'maven'
apply plugin: 'java-library'

//main class for running and variables
mainClassName = 'Steg.StegMeister'
group 'StegMeister' //group name
version = '1.0' //version number
sourceCompatibility = 9 //java source version
targetCompatibility = 9 //target jdk 8 needed for pmd

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url 'http://dl.bintray.com/jetbrains/intellij-plugin-service'
        }
        maven {
            url 'https://mvnrepository.com/artifact/junit/junit'
        }
        maven {
            url "https://mvnrepository.com/artifact/org.controlsfx/controlsfx"
        }
        maven {
            url "https://mvnrepository.com/artifact/net.sourceforge.pmd/pmd"
        }
        mavenCentral()
        jcenter()
        mavenLocal()
    }
    dependencies {
        //classpath "gradle.plugin.no.tornado:fxlauncher-gradle-plugin:1.0.16" //add if useful
        classpath "org.controlsfx:controlsfx:9.0.0"
        classpath "com.github.jengelman.gradle.plugins:shadow:2.0.2"
        //classpath "com.google.googlejavaformat:google-java-format:1.5"
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.1.0'
        classpath 'org.xerial:sqlite-jdbc:3.21.0.1'
        classpath 'gradle.plugin.com.github.sherter.google-java-format:google-java-format-gradle-plugin:0.6'
        classpath 'gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:1.6.1'
        classpath 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.7.1'
        classpath 'com.github.spotbugs:spotbugs-annotations:3.1.2'
    }
}

apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'com.github.sherter.google-java-format'
apply plugin: "com.github.spotbugs"



//add later if useful
//apply plugin: 'no.tornado.fxlauncher'

//Must be added after plugins keep above compile and test
repositories {
    mavenCentral()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

//Separate test compile dependancies
dependencies {
    testCompile(
            'org.junit.jupiter:junit-jupiter-api:5.1.0',
            'org.xerial:sqlite-jdbc:3.21.0.1',
            'org.controlsfx:controlsfx:9.0.0',
            'gradle.plugin.com.github.sherter.google-java-format:google-java-format-gradle-plugin:0.6',
            'com.github.spotbugs:spotbugs:3.1.2',
            'net.jcip:jcip-annotations:1.0',
            'com.github.spotbugs:spotbugs-annotations:3.1.2'
    )
    testRuntime(
            'org.junit.jupiter:junit-jupiter-engine:5.1.0'
    )
}

//separate compile dependencies
dependencies {
    compileOnly 'gradle.plugin.com.github.sherter.google-java-format:google-java-format-gradle-plugin:0.6'
    compile 'org.xerial:sqlite-jdbc:3.21.0.1'
    compile 'org.controlsfx:controlsfx:9.0.0'
    //compileOnly 'com.github.spotbugs:spotbugs:3.1.2'
    //compileOnly 'net.jcip:jcip-annotations:1.0'
    //compileOnly 'com.github.spotbugs:spotbugs-annotations:3.1.2'
}

//set wrapper to 4.6
task wrapper(type: Wrapper) {
    gradleVersion = '4.6'
}

//configure the jar file
jar {
    manifest {
        attributes 'Implementation-Title': 'StegMeister',
                   'Implementation-Version': version,
                   'Main-Class': 'Steg.StegMeister'
    }
}

//configure our test task for junit
test {
    // enable JUnit Platform (a.k.a. JUnit 5) support
    useJUnitPlatform()

    // set a system property for the test JVM(s)
   // systemProperty 'some.prop', 'value'

    // explicitly include or exclude tests
    //include 'org/foo/**'
    //exclude 'org/boo/**'

    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true

    // set heap size for the test JVM(s)
    minHeapSize = "128m"
    maxHeapSize = "512m"

    // set JVM arguments for the test JVM(s)
    jvmArgs '-XX:MaxPermSize=512'

    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    // Fail the 'test' task on the first test failure
    failFast = false

    // listen to standard out and standard error of the test JVM(s)
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
    }
}

//configure javadoc
javadoc {
    source = sourceSets.main.allJava
    classpath = sourceSets.main.compileClasspath
    // if not changed the destinationDir, the javadoc for production code is overridden.
    destinationDir = file("/docs/javadoc")
    title = "StegMeister"
}

//checkstyle
checkstyle {
    toolVersion = "8.8"
    configFile rootProject.file('checkstyle.xml')
    ignoreFailures false
    showViolations true
}

//pmd
pmd {
    toolVersion = "6.1.0"
    ignoreFailures = true
    sourceSets = [sourceSets.main]
    reportsDir = file("$project.buildDir/reports/pmd")
    ruleSets = [
            'java-basic',
            'java-braces',
            'java-clone',
            'java-codesize',
            'java-comments',
            'java-controversial',
            'java-design',
            'java-empty',
            'java-finalizers',
            'java-imports',
            'java-j2ee',
            'java-javabeans',
            'java-junit',
            'java-logging-jakarta-commons',
            'java-logging-java',
            'java-migrating',
            'java-naming',
            'java-optimizations',
            'java-strictexception',
            'java-strings',
            'java-sunsecure',
            'java-typeresolution',
            'java-unnecessary',
            'java-unusedcode'
    ]
}//formatter
googleJavaFormat {
    toolVersion = '1.5'
    source = sourceSets*.allJava
    source 'src/special_dir'
    include '**/*.java'
    exclude '**/*Template.java'
    exclude 'src/test/template_*'
}

//spotbugs
spotbugs {
    toolVersion = '3.1.2'
    sourceSets = [sourceSets.main]
    ignoreFailures = true
    effort = "max"
    reportLevel = "low"
    dependencies {
        spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.7.1'
    }
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    // configure automatically generated tasks
    reports {
        xml.enabled = false
        html.enabled = true
    }
}